{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","aria-label","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRequest","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6dc7911.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n               aria-label =' Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\n\r\nconst Card = ({id,name,email}) =>{\r\n    return(      \r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>            \r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// div內層一定要用{}包住元件\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div> \r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflowY:'scroll', border:'5px solid black',height:'500px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>That's not good.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\nimport {setSearchField,requestRobots} from '../action';\r\n\r\n//searchField是searchRobots裡的一個state\r\n//state在這邊被轉換成屬性\r\nconst mapStateToProps  = state =>{\r\n    return{\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\n//判斷哪個action要被dispatch\r\n//dispatch在這邊被轉換成屬性\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }   \r\n}\r\n\r\nclass App extends React.Component {\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         robots: []\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        //     .then(response => response.json())\r\n        //     .then(users => this.setState({ robots: users }));\r\n    }\r\n\r\n    //原本從onSearchChange(event)改成 onSearchChange = (event) =>，是為了確保裡面的this指向App，不然原本是指向SearchBox的<input>\r\n    //onSearchChange在上面已經被寫成屬性，這邊的函式註解掉\r\n    // onSearchChange = (event) => {\r\n    //     //不要寫成this.state.searchfield，直接用內建方法setState\r\n    //     this.setState({ searchfield: event.target.value });\r\n    // }\r\n\r\n    render() {\r\n        const {searchField,onSearchChange,robots, isPending} = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        if (isPending) {\r\n            return <h1 className='tc'>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robofriends</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n//connect方法會回傳一個方法\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","\r\nimport {\r\n        CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n//Actions are just objects\r\nexport const setSearchField = (text) => ({\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n})\r\n\r\n//回傳dispatch方法(thunkMiddleware會去監聽有哪個action是回傳function)\r\nexport const requestRobots = () => (dispatch) => {\r\n        dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n        .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n\r\n}","\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n\r\n// 初始化state，避免最開始取得的state是undefined\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRequest= {\r\n    isPending: false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRequest, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware,combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducer';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\n//createStore 將 reducer 轉換成 store\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App  />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}